const admin = require('../services/firebaseAdmin');
const axios = require('axios');

/**
 * Obtiene informaci√≥n de pa√≠ses desde Finnhub y guarda en Firestore los pa√≠ses
 * que tienen regi√≥n, moneda y c√≥digo de moneda v√°lidos y bandera disponible
 * @param {string} token - Token de API de Finnhub
 */
async function getInformationFromCountries(token) {
  try {
    // Obtener datos de la API de Finnhub
    const response = await axios.get(`https://finnhub.io/api/v1/country?token=${token}`);
    const countries = response.data;
    
    // Filtrar pa√≠ses que cumplen con los criterios b√°sicos
    const countriesWithBasicInfo = countries.filter(country => 
      country.region !== "" && 
      country.currency !== "" && 
      country.currencyCode !== ""
    );
    
    console.log(`Total pa√≠ses recibidos: ${countries.length}`);
    console.log(`Pa√≠ses con informaci√≥n b√°sica: ${countriesWithBasicInfo.length}`);
    
    // Verificar banderas disponibles
    const validCountries = [];
    for (const country of countriesWithBasicInfo) {
      try {
        // Verificar que la bandera existe
        const flagUrl = `https://flagcdn.com/${country.code2.toLowerCase()}.svg`;
        const flagResponse = await axios.head(flagUrl);
        
        // Si la bandera existe, agregar a lista de pa√≠ses v√°lidos
        if (flagResponse.status === 200) {
          // Agregar la URL de la bandera al objeto del pa√≠s
          country.flagUrl = flagUrl;
          validCountries.push(country);
        } else {
          console.log(`Pa√≠s ${country.country} (${country.code2}) no tiene bandera v√°lida`);
        }
      } catch (flagError) {
        // Si hay error (404 u otro), la bandera no existe
        console.log(`Pa√≠s ${country.country} (${country.code2}) no tiene bandera v√°lida: ${flagError.message}`);
      }
    }
    
    console.log(`Pa√≠ses con bandera v√°lida: ${validCountries.length}`);
    
    // Guardar en Firestore
    const db = admin.firestore();
    const batch = db.batch();
    
    validCountries.forEach(country => {
      const countryRef = db.collection('countries').doc(country.code2);
      batch.set(countryRef, country);
    });
    
    await batch.commit();
    console.log(`‚úÖ ${validCountries.length} pa√≠ses guardados en Firestore`);
    
    return validCountries;
  } catch (error) {
    console.error("üî• Error al obtener/guardar informaci√≥n de pa√≠ses:", error);
    throw error;
  }
}

// Ejemplo de uso (comentado para evitar ejecuci√≥n accidental)
getInformationFromCountries("cuf2kipr01qno7m4pgk0cuf2kipr01qno7m4pgkg")
  .catch(error => console.error("Error en la ejecuci√≥n:", error));

module.exports = { getInformationFromCountries }; 